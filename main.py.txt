import telebot
from telebot.types import *
from config import *
from datetime import datetime
from messages import *
from random import shuffle

bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

users_data = {}

def send_main_keyboard(chat_id, text=MAIN_MENU):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(START_TEST_BUTTON)
    bot.send_message(chat_id, text, reply_markup=keyboard)

def send_results(chat_id):
    answers = users_data[chat_id]
    true_answers = 0
    now_answer = 0
    for question in QUESTIONS:
        user_answer = answers[now_answer]
        true_answer = question[1][0]
        if user_answer == true_answer:
            true_answers += 1
        now_answer += 1
    amount_answers = len(answers)
    percent = int((true_answers / amount_answers) * 100)
    msg = RESULTS_TEXT
    msg = msg.replace("{PERCENT}", str(percent))
    if percent < 30:
        emoji = "😢"
    elif percent < 50:
        emoji = "🧐"
    elif percent < 80:
        emoji = "😏"
    else:
        emoji = "🧑‍💻"
    msg = msg.replace("{EMOJI}", emoji)
    bot.send_message(chat_id, msg)

def send_question(chat_id, question_index):
    question = QUESTIONS[question_index]
    answers = question[1][:]
    shuffle(answers)
    markup = InlineKeyboardMarkup(row_width=2)
    buttons = []
    for answer in answers:
        buttons.append(InlineKeyboardButton(answer, callback_data=f"{answer}_{question_index}"))
    markup.add(*buttons)
    bot.send_message(chat_id, question[0], reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    print(f"{datetime.now()} - {call.from_user.id} - {call.from_user.username} - {call.data}")
    chat_id, username, data = call.from_user.id, call.from_user.username, call.data
    answer, question_index = data.split("_")[0], int(data.split("_")[1])
    user_data = users_data[chat_id]
    user_data.append(answer)
    if len(user_data) != len(QUESTIONS):
        send_question(chat_id, question_index + 1)
    else:
        send_results(chat_id)

@bot.message_handler(commands=['help', 'start'])
def command_handler(message):
    print(f"{datetime.now()} - {message.chat.id} - {message.from_user.username} - {message.text}")
    chat_id, username, text = message.chat.id, message.from_user.username, message.text
    send_main_keyboard(chat_id, WELCOME_MESSAGE)

@bot.message_handler(func=lambda message: True)
def message_handler(message):
    print(f"{datetime.now()} - {message.chat.id} - {message.from_user.username} - {message.text}")
    chat_id, username, text = message.chat.id, message.from_user.username, message.text
    if text == START_TEST_BUTTON:
        users_data[chat_id] = []
        send_question(chat_id, 0)

while True:
    try:
        bot.polling()
    except Exception:
        pass
